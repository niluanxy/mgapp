/*====================================================
 * 全局底层函数方法
 *====================================================*/


/*====================================================
 * Px 转换 Rem 工具方法，$base 默认采取系统设置值
 *====================================================*/
@function rem($px, $base: $config-build-rem-base) {
    @if $config-build-rem == true {
        @return ($px / $base) * 1rem;
    } @else {
        @return $px;
    }
}

/*====================================================
 * 二维集合中获取指定维的指定值
 *====================================================*/
@function map-val($maps, $key, $val) {
    $values: map-get($maps, $key);

    @return map-get($values, $val);
}

/*====================================================
 * 颜色处理报错函数
 *====================================================*/
@function color-error($color-value) {
    @error "The value `#{$color-value}` must be a color";

    @return false;
}

/*====================================================
 * 颜色变淡函数
 *====================================================*/
@function color-brightness($color-value) {
    @if (type-of($color-value) != color) {
        @return color-error($color-value);
    }

    @return (red($color-value) * .299 + green($color-value) * .587 + blue($color-value) * .114) / 255 * 100%;
}

/*====================================================
 * 颜色加深函数
 *====================================================*/
@function color-inverse($color-value, $dark: #000, $light: #fff) {
    @if (type-of($color-value) != color) {
        @return color-error($color-value);
    }

    $brightness: color-brightness($color-value);
    $red: red($color-value);
    $green: green($color-value);

    @if ($brightness > 79) {
        @return $dark;
    }

    @if ($green > 240) {
        @return $dark;
    }

    @if ($red > 220 and $green > 180) {
        @return $dark;
    }

    @return $light;
}
